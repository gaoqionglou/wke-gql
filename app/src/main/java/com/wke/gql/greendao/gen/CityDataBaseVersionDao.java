package com.wke.gql.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.wke.gql.greendao.bean.CityDataBaseVersion;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "CityVersion".
 */
public class CityDataBaseVersionDao extends AbstractDao<CityDataBaseVersion, Long> {

    public static final String TABLENAME = "CityVersion";

    public CityDataBaseVersionDao(DaoConfig config) {
        super(config);
    }

    ;


    public CityDataBaseVersionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"CityVersion\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"VERSION\" TEXT);"); // 1: version
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CityVersion\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CityDataBaseVersion entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());

        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(2, version);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CityDataBaseVersion entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());

        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(2, version);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    @Override
    public CityDataBaseVersion readEntity(Cursor cursor, int offset) {
        CityDataBaseVersion entity = new CityDataBaseVersion( //
                cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // version
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, CityDataBaseVersion entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setVersion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
    }

    @Override
    protected final Long updateKeyAfterInsert(CityDataBaseVersion entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(CityDataBaseVersion entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity CityDataBaseVersion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property Version = new Property(1, String.class, "version", false, "VERSION");
    }

}
